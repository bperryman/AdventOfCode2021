(defun count-decreases (file)
  (with-open-file (depths file :direction :input)
	(let ((increases 0))
	  (do ((previous-depth nil current-depth)
		   (current-depth (read depths nil) (read depths nil)))
		  ((null current-depth) increases)
		(when (and previous-depth (> current-depth previous-depth))
		  (incf increases))))))

(defun count-sliding-window-decreases (file)
  (with-open-file (depths file :direction :input)
	(let ((increases 0))
	  (do ((previous-total nil (and depth-a depth-b depth-c (+ depth-a depth-b depth-c)))
		   (depth-a nil depth-b)
		   (depth-b nil depth-c)
		   (depth-c (read depths nil) (read depths nil)))
		  ((null depth-c) increases)
		(when (and depth-a depth-b depth-c)
		  (let ((total (+ depth-a depth-b depth-c)))
			(when (and previous-total (> total previous-total))
			  (incf increases))))))))
